services:
  # üóÑÔ∏è PostgreSQL Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ (Î©îÏù∏) - Í≥†Ï†ï Î≤ÑÏ†Ñ
  postgres:
    image: postgres:15.5-alpine
    container_name: callytics-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-callytics}
      - POSTGRES_USER=${POSTGRES_USER:-callytics_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-1234}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/db/sql/postgresql_migration_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-callytics_user} -d ${POSTGRES_DB:-callytics}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - callytics-net
    restart: unless-stopped

  # üìã SQLite ‚Üí PostgreSQL ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÏÑúÎπÑÏä§
  db-migrator:
    build:
      context: .
      dockerfile: Dockerfile.db-migrator
    container_name: callytics-db-migrator
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-callytics}
      - POSTGRES_USER=${POSTGRES_USER:-callytics_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-1234}
      - SQLITE_PATH=/app/Callytics_new.sqlite
      - PYTHONPATH=/app
      - TZ=Asia/Seoul
      - PYTHONIOENCODING=utf-8
    volumes:
      - ./Callytics_new.sqlite:/app/Callytics_new.sqlite:ro
      - ./logs:/app/logs
      - ./src:/app/src
    networks:
      - callytics-net
    restart: "no"  # Ìïú Î≤àÎßå Ïã§Ìñâ

  # üî¥ Redis Ï∫êÏãú - Í≥†Ï†ï Î≤ÑÏ†Ñ
  redis:
    image: redis:7.2-alpine
    container_name: callytics-redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    networks:
      - callytics-net
    restart: unless-stopped

  # üåê API Gateway (Î©îÏù∏ ÏßÑÏûÖÏ†ê)
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    container_name: callytics-api-gateway
    ports:
      - "8000:8000"
    environment:
      - AUDIO_PROCESSOR_URL=http://audio-processor:8001
      - SPEAKER_DIARIZER_URL=http://speaker-diarizer:8002
      - SPEECH_RECOGNIZER_URL=http://speech-recognizer:8003
      - PUNCTUATION_RESTORER_URL=http://punctuation-restorer:8004
      - SENTIMENT_ANALYZER_URL=http://sentiment-analyzer:8005
      - LLM_ANALYZER_URL=http://llm-analyzer:8006
      - DATABASE_SERVICE_URL=http://database-service:8007
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-callytics}
      - POSTGRES_USER=${POSTGRES_USER:-callytics_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-1234}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-development-only-secret}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - TZ=Asia/Seoul
      - LANG=ko_KR.UTF-8
      - LC_ALL=ko_KR.UTF-8
      - PYTHONIOENCODING=utf-8
    volumes:
      - ./audio:/app/audio
      - ./temp:/app/temp
      - ./logs:/app/logs
      - ./.cache:/app/.cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      audio-processor:
        condition: service_healthy
      speaker-diarizer:
        condition: service_healthy
      speech-recognizer:
        condition: service_healthy
      punctuation-restorer:
        condition: service_healthy
      sentiment-analyzer:
        condition: service_healthy
      llm-analyzer:
        condition: service_healthy
      database-service:
        condition: service_healthy
    networks:
      - callytics-net
    restart: unless-stopped

  # üéµ Ïò§ÎîîÏò§ Ï≤òÎ¶¨ ÏÑúÎπÑÏä§ (CPU Ï†ÑÏö©)
  audio-processor:
    build:
      context: .
      dockerfile: Dockerfile.audio-processor
    container_name: callytics-audio-processor
    ports:
      - "8001:8001"
    environment:
      - PYTHONPATH=/app
      - DEVICE=cpu
      - TZ=Asia/Seoul
      - LANG=ko_KR.UTF-8
      - LC_ALL=ko_KR.UTF-8
      - PYTHONIOENCODING=utf-8
    volumes:
      - ./audio:/app/audio
      - ./temp:/app/temp
      - ./logs:/app/logs
      - ./.cache:/app/.cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
    networks:
      - callytics-net
    restart: unless-stopped

  # üé§ ÌôîÏûê Î∂ÑÎ¶¨ ÏÑúÎπÑÏä§ (GPU ÌïÑÏàò)
  speaker-diarizer:
    build:
      context: .
      dockerfile: Dockerfile.speaker-diarizer
    container_name: callytics-speaker-diarizer
    ports:
      - "8002:8002"
    environment:
      - PYTHONPATH=/app
      - DEVICE=cuda
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
      - CUDA_VISIBLE_DEVICES=0
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:128
      - TZ=Asia/Seoul
      - LANG=ko_KR.UTF-8
      - LC_ALL=ko_KR.UTF-8
      - PYTHONIOENCODING=utf-8
    volumes:
      - ./audio:/app/audio
      - ./temp:/app/temp
      - ./logs:/app/logs
      - ./config:/app/config
      - ./.cache:/app/.cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 15s
      retries: 8
      start_period: 180s  # GPU Î™®Îç∏ Î°úÎî© ÏãúÍ∞Ñ Í≥†Î†§
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4'
        reservations:
          memory: 2G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu, utility, compute]
    networks:
      - callytics-net
    restart: unless-stopped

  # üó£Ô∏è ÏùåÏÑ± Ïù∏Ïãù ÏÑúÎπÑÏä§ (GPU ÌïÑÏàò)
  speech-recognizer:
    build:
      context: .
      dockerfile: Dockerfile.speech-recognizer
    container_name: callytics-speech-recognizer
    ports:
      - "8003:8003"
    environment:
      - PYTHONPATH=/app
      - DEVICE=cuda
      - CUDA_VISIBLE_DEVICES=0
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:128
    volumes:
      - ./audio:/app/audio
      - ./temp:/app/temp
      - ./logs:/app/logs
      - ./.cache:/app/.cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 15s
      retries: 8
      start_period: 180s  # GPU Î™®Îç∏ Î°úÎî© ÏãúÍ∞Ñ Í≥†Î†§
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '3'
        reservations:
          memory: 1G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu, utility, compute]
    networks:
      - callytics-net
    restart: unless-stopped

  # üìù Î¨∏Ïû• Î∂ÄÌò∏ Î≥µÏõê ÏÑúÎπÑÏä§ (CPU Ï†ÑÏö©)
  punctuation-restorer:
    build:
      context: .
      dockerfile: Dockerfile.punctuation-restorer
    container_name: callytics-punctuation-restorer
    ports:
      - "8004:8004"
    environment:
      - PYTHONPATH=/app
      - DEVICE=cpu
    volumes:
      - ./temp:/app/temp
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
    networks:
      - callytics-net
    restart: unless-stopped

  # üß† Í∞êÏ†ï Î∂ÑÏÑù ÏÑúÎπÑÏä§ (CPU Ï†ÑÏö©)
  sentiment-analyzer:
    build:
      context: .
      dockerfile: Dockerfile.sentiment-analyzer
    container_name: callytics-sentiment-analyzer
    ports:
      - "8005:8005"
    environment:
      - PYTHONPATH=/app
      - DEVICE=cpu
    volumes:
      - ./temp:/app/temp
      - ./logs:/app/logs
      - ./data:/app/data
      - ./.cache:/app/.cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2'
    networks:
      - callytics-net
    restart: unless-stopped

  # ü§ñ LLM Î∂ÑÏÑù ÏÑúÎπÑÏä§ (API Í∏∞Î∞ò)
  llm-analyzer:
    build:
      context: .
      dockerfile: Dockerfile.llm-analyzer
    container_name: callytics-llm-analyzer
    ports:
      - "8006:8006"
    environment:
      - PYTHONPATH=/app
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./temp:/app/temp
      - ./logs:/app/logs
      - ./config:/app/config
      - ./.cache:/app/.cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
    networks:
      - callytics-net
    restart: unless-stopped

  # üóÑÔ∏è Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑúÎπÑÏä§
  database-service:
    build:
      context: .
      dockerfile: Dockerfile.database-service
    container_name: callytics-database-service
    ports:
      - "8007:8007"
    environment:
      - PYTHONPATH=/app
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-callytics}
      - POSTGRES_USER=${POSTGRES_USER:-callytics_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-1234}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-development-only-secret}
    volumes:
      - ./logs:/app/logs
      - ./.cache:/app/.cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    networks:
      - callytics-net
    restart: unless-stopped

  # üìä Î™®ÎãàÌÑ∞ÎßÅ ÏÑúÎπÑÏä§
  monitoring:
    build:
      context: .
      dockerfile: Dockerfile.monitoring
    container_name: callytics-monitoring
    ports:
      - "8008:8008"
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    networks:
      - callytics-net
    restart: unless-stopped



  # üìà Prometheus (Í∏∞Ï°¥)
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    volumes:
      - ./config/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - callytics-net
    restart: unless-stopped

  # üìä Grafana (Í∏∞Ï°¥)
  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - TZ=Asia/Seoul
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - callytics-net
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  callytics-net:
    driver: bridge 