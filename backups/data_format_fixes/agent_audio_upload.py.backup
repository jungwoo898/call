#!/usr/bin/env python3
"""
Callytics 상담사 오디오 업로드 시스템
로그인된 상담사 정보와 오디오 파일을 연동하여 분석
"""

import os
import shutil
import logging
from datetime import datetime
from typing import Dict, Any, Optional, List
from pathlib import Path
import hashlib
from dataclasses import dataclass

from ..auth.agent_auth import AgentAuthManager, AgentSession
from ..db.multi_database_manager import MultiDatabaseManager

logger = logging.getLogger(__name__)

@dataclass
class AudioUploadInfo:
    """오디오 업로드 정보"""
    file_path: str
    original_filename: str
    file_size: int
    duration_seconds: float
    sample_rate: int
    channels: int
    format_type: str
    upload_timestamp: datetime
    agent_id: int
    agent_name: str
    department: str
    position: str
    consultation_type: str
    customer_id: str
    session_notes: str

class AgentAudioUploadManager:
    """상담사 오디오 업로드 관리자"""
    
    def __init__(self, upload_dir: str = "audio", temp_dir: str = "temp"):
        self.upload_dir = Path(upload_dir)
        self.temp_dir = Path(temp_dir)
        self.auth_manager = AgentAuthManager()
        self.db_manager = MultiDatabaseManager()
        
        # 디렉토리 생성
        self.upload_dir.mkdir(exist_ok=True)
        self.temp_dir.mkdir(exist_ok=True)
    
    def upload_audio_validate_audio_file(self, file_path: str) -> Dict[str, Any]:
        """오디오 파일 유효성 검사"""
        try:
            import librosa
            
            # 파일 존재 확인
            if not os.path.exists(file_path):
                return {"valid": False, "error": "파일이 존재하지 않습니다"}
            
            # 파일 크기 확인 (100MB 제한)
            file_size = os.path.getsize(file_path)
            if file_size > 100 * 1024 * 1024:
                return {"valid": False, "error": "파일 크기가 100MB를 초과합니다"}
            
            # 오디오 파일 정보 추출
            y, sr = librosa.load(file_path, sr=None)
            duration = librosa.get_duration(y=y, sr=sr)
            
            # 지원 형식 확인
            supported_formats = ['.wav', '.mp3', '.m4a', '.flac', '.ogg']
            file_ext = Path(file_path).suffix.lower()
            if file_ext not in supported_formats:
                return {"valid": False, "error": f"지원하지 않는 형식입니다: {file_ext}"}
            
            # 길이 확인 (최대 2시간)
            if duration > 7200:
                return {"valid": False, "error": "오디오 길이가 2시간을 초과합니다"}
            
            return {
                "valid": True,
                "file_size": file_size,
                "duration_seconds": duration,
                "sample_rate": sr,
                "channels": len(y.shape) if len(y.shape) > 1 else 1,
                "format_type": file_ext[1:].upper()
            }
            
        except Exception as e:
            logger.error(f"오디오 파일 검증 실패: {e}")
            return {"valid": False, "error": f"파일 검증 중 오류가 발생했습니다: {str(e)}"}
    
    def upload_audio_generate_unique_filename(self, original_filename: str, agent_id: int) -> str:
        """고유한 파일명 생성"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        file_ext = Path(original_filename).suffix
        base_name = Path(original_filename).stem
        
        # 파일명 해시 생성 (중복 방지)
        hash_input = f"{agent_id}_{original_filename}_{timestamp}"
        file_hash = hashlib.md5(hash_input.encode("utf-8")).hexdigest()[:8]
        
        return f"agent_{agent_id}_{timestamp}_{file_hash}{file_ext}"
    
    def upload_audio_upload_audio_with_agent_info(self, 
                                   session_token: str,
                                   audio_file_path: str,
                                   original_filename: str,
                                   consultation_type: str = 'other',
                                   customer_id: str = None,
                                   session_notes: str = None) -> Optional[AudioUploadInfo]:
        """상담사 정보와 함께 오디오 업로드"""
        try:
            # 세션 검증
            agent_session = self.auth_manager.validate_session(session_token)
            if not agent_session:
                logger.error("유효하지 않은 세션 토큰")
                return None
            
            # 권한 확인
            if not self.auth_manager.check_permission(agent_session.agent_id, 'audio_upload', 'write'):
                logger.error(f"오디오 업로드 권한이 없습니다: agent_id={agent_session.agent_id}")
                return None
            
            # 오디오 파일 검증
            validation_result = self.upload_audio_validate_audio_file(audio_file_path)
            if not validation_result["valid"]:
                logger.error(f"오디오 파일 검증 실패: {validation_result['error']}")
                return None
            
            # 고유 파일명 생성
            unique_filename = self.upload_audio_generate_unique_filename(original_filename, agent_session.agent_id)
            destination_path = self.upload_dir / unique_filename
            
            # 파일 복사
            shutil.copy2(audio_file_path, destination_path)
            
            # 업로드 정보 생성
            upload_info = AudioUploadInfo(
                file_path=str(destination_path),
                original_filename=original_filename,
                file_size=validation_result["file_size"],
                duration_seconds=validation_result["duration_seconds"],
                sample_rate=validation_result["sample_rate"],
                channels=validation_result["channels"],
                format_type=validation_result["format_type"],
                upload_timestamp=datetime.now(),
                agent_id=agent_session.agent_id,
                agent_name=agent_session.full_name,
                department=agent_session.department,
                position=agent_session.position,
                consultation_type=consultation_type,
                customer_id=customer_id,
                session_notes=session_notes
            )
            
            # 데이터베이스에 저장
            self._save_upload_info_to_db(upload_info)
            
            # 활동 로그 기록
            self.auth_manager.log_activity(
                agent_id=agent_session.agent_id,
                activity_type='audio_upload',
                description=f'오디오 파일 업로드: {original_filename}',
                activity_data=f'file_size={validation_result["file_size"]}, duration={validation_result["duration_seconds"]}'
            )
            
            logger.info(f"오디오 업로드 완료: {original_filename} -> {unique_filename} (agent_id={agent_session.agent_id})")
            return upload_info
            
        except Exception as e:
            logger.error(f"오디오 업로드 실패: {e}")
            return None
    
    def _save_upload_info_to_db(self, upload_info: AudioUploadInfo):
        """업로드 정보를 데이터베이스에 저장"""
        try:
            # 오디오 분석 DB에 파일 정보 저장
            audio_file_id = self.db_manager.save_audio_file(
                file_path=upload_info.file_path,
                file_name=upload_info.original_filename,
                file_size=upload_info.file_size,
                duration_seconds=upload_info.duration_seconds,
                sample_rate=upload_info.sample_rate,
                channels=upload_info.channels,
                format_type=upload_info.format_type
            )
            
            # 상담 품질 분석 DB에 세션 정보 생성
            session_date = upload_info.upload_timestamp.date().isoformat()
            duration_minutes = upload_info.duration_seconds / 60
            
            session_id = self.db_manager.create_consultation_session(
                audio_file_id=audio_file_id,
                session_date=session_date,
                duration_minutes=duration_minutes,
                agent_name=upload_info.agent_name,
                customer_id=upload_info.customer_id,
                consultation_type=upload_info.consultation_type
            )
            
            # 세션 메타데이터 저장
            self._save_session_metadata(session_id, upload_info)
            
            logger.info(f"DB 저장 완료: audio_file_id={audio_file_id}, session_id={session_id}")
            
        except Exception as e:
            logger.error(f"DB 저장 실패: {e}")
            raise
    
    def _save_session_metadata(self, session_id: int, upload_info: AudioUploadInfo):
        """세션 메타데이터 저장"""
        try:
            # 세션 메타데이터 테이블에 저장
            metadata = {
                'upload_timestamp': upload_info.upload_timestamp.isoformat(),
                'agent_department': upload_info.department,
                'agent_position': upload_info.position,
                'session_notes': upload_info.session_notes,
                'original_filename': upload_info.original_filename,
                'file_format': upload_info.format_type,
                'sample_rate': upload_info.sample_rate,
                'channels': upload_info.channels
            }
            
            with self.db_manager.get_connection("quality") as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO session_metadata (session_id, metadata_key, metadata_value)
                    VALUES (?, ?, ?)
                """, (session_id, 'upload_info', str(metadata)))
                
                conn.commit()
                
        except Exception as e:
            logger.error(f"세션 메타데이터 저장 실패: {e}")
    
    def upload_audio_get_agent_upload_history(self, session_token: str, limit: int = 50) -> List[Dict[str, Any]]:
        """상담사 업로드 히스토리 조회"""
        try:
            # 세션 검증
            agent_session = self.auth_manager.validate_session(session_token)
            if not agent_session:
                return []
            
            # 권한 확인
            if not self.auth_manager.check_permission(agent_session.agent_id, 'analysis_view', 'read'):
                return []
            
            # 업로드 히스토리 조회
            conn = self.db_manager.get_connection("quality")
            cursor = conn.cursor()
            cursor.execute("""
                SELECT 
                    cs.id as session_id,
                    cs.session_date,
                    cs.duration_minutes,
                    cs.consultation_type,
                    cs.analysis_status,
                    cs.overall_quality_score,
                    af.file_name,
                    af.upload_timestamp,
                    af.processing_status
                FROM consultation_sessions cs
                JOIN audio_files af ON cs.audio_file_id = af.id
                WHERE cs.agent_name = ?
                ORDER BY cs.session_date DESC, cs.created_at DESC
                LIMIT ?
            """, (agent_session.full_name, limit))
            
            return [dict(row) for row in cursor.fetchall()]
                
        except Exception as e:
            logger.error(f"업로드 히스토리 조회 실패: {e}")
            return []
    
    def upload_audio_get_agent_analysis_summary(self, session_token: str) -> Dict[str, Any]:
        """상담사 분석 요약 조회"""
        try:
            # 세션 검증
            agent_session = self.auth_manager.validate_session(session_token)
            if not agent_session:
                return {}
            
            # 권한 확인
            if not self.auth_manager.check_permission(agent_session.agent_id, 'analysis_view', 'read'):
                return {}
            
            # 분석 요약 조회
            with self.db_manager.get_connection("quality") as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT 
                        COUNT(*) as total_sessions,
                        AVG(cs.overall_quality_score) as avg_quality_score,
                        AVG(cs.duration_minutes) as avg_duration,
                        COUNT(CASE WHEN cs.analysis_status = 'completed' THEN 1 END) as completed_analyses,
                        COUNT(CASE WHEN cs.analysis_status = 'processing' THEN 1 END) as processing_analyses,
                        COUNT(CASE WHEN cs.resolution_status = 'resolved' THEN 1 END) as resolved_sessions
                    FROM consultation_sessions cs
                    WHERE cs.agent_name = ?
                """, (agent_session.full_name,))
                
                row = cursor.fetchone()
                if row:
                    return dict(row)
                return {}
                
        except Exception as e:
            logger.error(f"분석 요약 조회 실패: {e}")
            return {}
    
    def upload_audio_get_agent_performance_insights(self, session_token: str, days: int = 30) -> Dict[str, Any]:
        """상담사 성과 인사이트 조회"""
        try:
            # 세션 검증
            agent_session = self.auth_manager.validate_session(session_token)
            if not agent_session:
                return {}
            
            # 권한 확인
            if not self.auth_manager.check_permission(agent_session.agent_id, 'analysis_view', 'read'):
                return {}
            
            # 성과 인사이트 조회
            with self.db_manager.get_connection("quality") as conn:
                cursor = conn.cursor()
                
                # 최근 N일간 성과
                cursor.execute("""
                    SELECT 
                        AVG(cs.overall_quality_score) as recent_avg_quality,
                        COUNT(*) as recent_sessions,
                        AVG(sa.sentiment_score) as recent_avg_sentiment
                    FROM consultation_sessions cs
                    LEFT JOIN sentiment_analysis sa ON cs.id = sa.session_id
                    WHERE cs.agent_name = ? 
                    AND cs.session_date >= date('now', '-{} days')
                    AND cs.analysis_status = 'completed'
                """.format(days), (agent_session.full_name,))
                
                recent_performance = cursor.fetchone()
                
                # 상담 유형별 성과
                cursor.execute("""
                    SELECT 
                        consultation_type,
                        COUNT(*) as session_count,
                        AVG(overall_quality_score) as avg_quality
                    FROM consultation_sessions
                    WHERE agent_name = ? AND analysis_status = 'completed'
                    GROUP BY consultation_type
                    ORDER BY session_count DESC
                """, (agent_session.full_name,))
                
                type_performance = [dict(row) for row in cursor.fetchall()]
                
                # 개선 제안사항
                cursor.execute("""
                    SELECT 
                        is.suggestion_category,
                        COUNT(*) as suggestion_count
                    FROM improvement_suggestions is
                    JOIN consultation_sessions cs ON is.session_id = cs.id
                    WHERE cs.agent_name = ? AND is.priority = 'high'
                    GROUP BY is.suggestion_category
                    ORDER BY suggestion_count DESC
                """, (agent_session.full_name,))
                
                improvement_areas = [dict(row) for row in cursor.fetchall()]
                
                return {
                    'recent_performance': dict(recent_performance) if recent_performance else {},
                    'type_performance': type_performance,
                    'improvement_areas': improvement_areas,
                    'analysis_period_days': days
                }
                
        except Exception as e:
            logger.error(f"성과 인사이트 조회 실패: {e}")
            return {}
    
    def upload_audio_delete_uploaded_audio(self, session_token: str, session_id: int) -> bool:
        """업로드된 오디오 삭제"""
        try:
            # 세션 검증
            agent_session = self.auth_manager.validate_session(session_token)
            if not agent_session:
                return False
            
            # 권한 확인
            if not self.auth_manager.check_permission(agent_session.agent_id, 'audio_upload', 'write'):
                return False
            
            # 세션 소유권 확인
            with self.db_manager.get_connection("quality") as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT cs.agent_name, af.file_path
                    FROM consultation_sessions cs
                    JOIN audio_files af ON cs.audio_file_id = af.id
                    WHERE cs.id = ?
                """, (session_id,))
                
                row = cursor.fetchone()
                if not row or row['agent_name'] != agent_session.full_name:
                    logger.warning(f"세션 소유권 확인 실패: session_id={session_id}")
                    return False
                
                file_path = row['file_path']
            
            # 파일 삭제
            if os.path.exists(file_path):
                os.remove(file_path)
                logger.info(f"오디오 파일 삭제 완료: {file_path}")
            
            # 활동 로그 기록
            self.auth_manager.log_activity(
                agent_id=agent_session.agent_id,
                activity_type='audio_delete',
                description=f'오디오 파일 삭제: session_id={session_id}'
            )
            
            return True
            
        except Exception as e:
            logger.error(f"오디오 삭제 실패: {e}")
            return False 