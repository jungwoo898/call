#!/usr/bin/env python3
"""
API 스키마 검증 미들웨어
런타임에 요청/응답 스키마 검증 및 타입 안정성 보장
"""

import json
import logging
from typing import Dict, Any, Optional, Union
from datetime import datetime
import uuid
from fastapi import Request, Response
from fastapi.responses import JSONResponse
from starlette.middleware.base import BaseHTTPMiddleware
from pydantic import ValidationError

logger = logging.getLogger(__name__)

class SchemaValidationMiddleware(BaseHTTPMiddleware):
    """스키마 검증 미들웨어"""
    
    def __init__(self, app, enable_validation: bool = True, log_violations: bool = True):
        super().__init__(app)
        self.enable_validation = enable_validation
        self.log_violations = log_violations
        self.violation_count = 0
        
    async def dispatch(self, request: Request, call_next):
        # 요청 ID 생성
        request_id = str(uuid.uuid4())[:8]
        request.state.request_id = request_id
        
        # 요청 전처리
        start_time = datetime.utcnow()
        
        try:
            response = await call_next(request)
            
            # 응답 후처리
            if self.enable_validation:
                await self._validate_response(request, response, request_id)
            
            return response
            
        except ValidationError as e:
            logger.error(f"🔴 스키마 검증 실패 [{request_id}]: {e}")
            return JSONResponse(
                status_code=400,
                content={
                    "status": "error",
                    "message": "요청 데이터 검증 실패",
                    "error_code": "SCHEMA_VALIDATION_ERROR",
                    "error_details": e.errors(),
                    "request_id": request_id,
                    "timestamp": datetime.utcnow().isoformat() + "Z"
                }
            )
        except Exception as e:
            logger.error(f"🔴 미들웨어 오류 [{request_id}]: {e}")
            return JSONResponse(
                status_code=500,
                content={
                    "status": "error", 
                    "message": "서버 내부 오류",
                    "request_id": request_id,
                    "timestamp": datetime.utcnow().isoformat() + "Z"
                }
            )
    
    async def _validate_response(self, request: Request, response: Response, request_id: str):
        """응답 스키마 검증"""
        if hasattr(response, 'body') and response.status_code == 200:
            try:
                # 응답 본문이 JSON인지 확인
                content_type = response.headers.get('content-type', '')
                if 'application/json' in content_type:
                    # 응답 데이터 검증
                    await self._check_response_consistency(request, response, request_id)
                    
            except Exception as e:
                if self.log_violations:
                    logger.warning(f"⚠️ 응답 검증 실패 [{request_id}]: {e}")
                self.violation_count += 1
    
    async def _check_response_consistency(self, request: Request, response: Response, request_id: str):
        """응답 일관성 검사"""
        try:
            # 예상 응답 필드
            required_fields = ["status", "message", "timestamp"]
            
            if hasattr(response, 'body'):
                response_body = response.body
                if isinstance(response_body, bytes):
                    response_data = json.loads(response_body.decode())
                else:
                    response_data = response_body
                
                # 필수 필드 검사
                missing_fields = [field for field in required_fields if field not in response_data]
                
                if missing_fields:
                    if self.log_violations:
                        logger.warning(f"⚠️ 응답 필드 누락 [{request_id}]: {missing_fields}")
                    self.violation_count += 1
                
                # 타입 일관성 검사
                await self._check_type_consistency(response_data, request_id)
                
        except json.JSONDecodeError:
            # JSON이 아닌 응답은 검증하지 않음
            pass
        except Exception as e:
            logger.debug(f"응답 검증 중 오류 [{request_id}]: {e}")
    
    async def _check_type_consistency(self, response_data: Dict[str, Any], request_id: str):
        """타입 일관성 검사"""
        type_issues = []
        
        # null vs empty 검사
        for key, value in response_data.items():
            if value == None or value is None:
                type_issues.append(f"'{key}': null/empty 일관성 확인 필요")
            elif isinstance(value, list) and len(value) == 0:
                type_issues.append(f"'{key}': 빈 리스트 처리 일관성 확인 필요")
        
        if type_issues and self.log_violations:
            logger.warning(f"⚠️ 타입 일관성 문제 [{request_id}]: {'; '.join(type_issues)}")
            self.violation_count += len(type_issues)

class ResponseStandardizer:
    """응답 표준화 유틸리티"""
    
    @staticmethod
    def util_create_standard_response(
        status: str = "success",
        message: str = None,
        data: Optional[Dict[str, Any]] = None,
        request_id: str | None = None,
        error_code: str | None = None,
        error_details: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """표준화된 응답 생성"""
        response = {
            "status": status,
            "message": message,
            "timestamp": datetime.utcnow().isoformat() + "Z"
        }
        
        if request_id:
            response["request_id"] = request_id
            
        if data is not None:
            response["data"] = data
            
        if error_code:
            response["error_code"] = error_code
            
        if error_details:
            response["error_details"] = error_details
            
        return response
    
    @staticmethod
    def util_ensure_consistent_types(data: Dict[str, Any]) -> Dict[str, Any]:
        """일관된 타입으로 변환"""
        cleaned_data = {}
        
        for key, value in data.items():
            # null/empty 일관성 처리
            if value is None:
                cleaned_data[key] = None  # null은 null로 유지
            elif value == None:
                cleaned_data[key] = None  # 빈 문자열은 null로 변환
            elif isinstance(value, list) and len(value) == 0:
                cleaned_data[key] = []  # 빈 리스트는 그대로 유지
            else:
                cleaned_data[key] = value
                
        return cleaned_data

def util_get_schema_validation_stats() -> Dict[str, Any]:
    """스키마 검증 통계 반환"""
    # 실제 구현에서는 전역 상태나 메트릭 저장소에서 가져옴
    return {
        "total_violations": 0,
        "common_issues": [
            "response_model 매개변수 누락",
            "JSONResponse 직접 사용",
            "null vs empty 불일치"
        ],
        "affected_services": [
            "audio-processor",
            "text-processor", 
            "gateway",
            "database-service"
        ]
    }

# FastAPI 앱에 적용하는 헬퍼 함수
def util_setup_schema_validation(app, enable_validation: bool = True):
    """스키마 검증 미들웨어 설정"""
    middleware = SchemaValidationMiddleware(
        app, 
        enable_validation=enable_validation,
        log_violations=True
    )
    app.add_middleware(SchemaValidationMiddleware, 
                      enable_validation=enable_validation,
                      log_violations=True)
    
    logger.info(f"🔍 스키마 검증 미들웨어 활성화: {enable_validation}")
    return middleware 