# Standard library imports
import os
import asyncio
import subprocess
import tempfile
import shutil
import time
import threading
from concurrent.futures import ThreadPoolExecutor, as_completed
from typing import Annotated, List, Dict, Optional
from pathlib import Path

# Related third-party imports
import librosa
import soundfile as sf
from librosa.feature import rms
from omegaconf import OmegaConf
from noisereduce import reduce_noise

# MPSENet 안전 import
MPSENet = None
try:
    import warnings
    with warnings.catch_warnings():
        warnings.simplefilter("ignore")
    from MPSENet import MPSENet
    print("✅ MPSENet imported successfully")
except ImportError as e:
    print(f"⚠️ MPSENet import failed: {e}")
    print("🔄 SpeechEnhancement will run in fallback mode")
except Exception as e:
    print(f"⚠️ MPSENet error: {e}")
    print("🔄 SpeechEnhancement will run in fallback mode")

# Local imports
from src.utils.utils import Logger


class AudioPreprocessor:
    """
    고성능 오디오 전처리 클래스
    ffmpeg 병렬 처리, 임시파일 자동 정리, 캐싱 지원
    """
    
    def __init__(self, max_workers: int = 4, cache_dir: str = "/app/.cache/audio"):
        """
        AudioPreprocessor 초기화
        
        Parameters
        ----------
        max_workers : int
            병렬 처리할 최대 워커 수
        cache_dir : str
            캐시 디렉토리 경로
        """
        self.max_workers = max_workers
        self.cache_dir = Path(cache_dir)
        self.cache_dir.mkdir(parents=True, exist_ok=True)
        self.executor = ThreadPoolExecutor(max_workers=max_workers)
        self.temp_files = set()
        self.temp_lock = threading.Lock()
        
        # 임시파일 정리 스레드 시작
        self.cleanup_thread = threading.Thread(target=self._cleanup_temp_files, daemon=True)
        self.cleanup_thread.start()
    
    def _cleanup_temp_files(self):
        """임시파일 자동 정리 스레드"""
        while True:
            try:
                time.sleep(300)  # 5분마다 정리
                with self.temp_lock:
                    current_time = time.time()
                    files_to_remove = []
                    
                    for temp_file in self.temp_files:
                        if os.path.exists(temp_file):
                            # 1시간 이상 된 임시파일 삭제
                            if current_time - os.path.getmtime(temp_file) > 3600:
                                files_to_remove.append(temp_file)
                    
                    for file_path in files_to_remove:
                        try:
                            os.remove(file_path)
                            self.temp_files.remove(file_path)
                            print(f"🧹 임시파일 정리: {file_path}")
                        except Exception as e:
                            print(f"⚠️ 임시파일 삭제 실패: {file_path}, {e}")
                            
            except Exception as e:
                print(f"⚠️ 임시파일 정리 스레드 오류: {e}")
    
    def _add_temp_file(self, file_path: str):
        """임시파일 추적에 추가"""
        with self.temp_lock:
            self.temp_files.add(file_path)
    
    async def normalize_audio_parallel(self, audio_files: List[str], output_dir: str) -> List[str]:
        """
        여러 오디오 파일을 병렬로 정규화
        
        Parameters
        ----------
        audio_files : List[str]
            정규화할 오디오 파일 경로 리스트
        output_dir : str
            출력 디렉토리
            
        Returns
        -------
        List[str]
            정규화된 오디오 파일 경로 리스트
        """
        os.makedirs(output_dir, exist_ok=True)
        
        # 병렬 처리 태스크 생성
        tasks = []
        for audio_file in audio_files:
            task = self.executor.submit(self._normalize_single_audio, audio_file, output_dir)
            tasks.append(task)
        
        # 결과 수집
        results = []
        for future in as_completed(tasks):
            try:
                result = future.result()
                results.append(result)
            except Exception as e:
                print(f"⚠️ 오디오 정규화 실패: {e}")
                results.append(None)
        
        return results
    
    def _normalize_single_audio(self, audio_file: str, output_dir: str) -> Optional[str]:
        """
        단일 오디오 파일 정규화
        
        Parameters
        ----------
        audio_file : str
            입력 오디오 파일 경로
        output_dir : str
            출력 디렉토리
            
        Returns
        -------
        Optional[str]
            정규화된 파일 경로 또는 None
        """
        try:
            # 캐시 확인
            cache_key = f"{Path(audio_file).stem}_normalized.wav"
            cache_path = self.cache_dir / cache_key
            
            if cache_path.exists():
                # 캐시에서 복사
                output_path = os.path.join(output_dir, cache_key)
                shutil.copy2(cache_path, output_path)
                return output_path
            
            # ffmpeg로 정규화
            output_filename = f"{Path(audio_file).stem}_normalized.wav"
            output_path = os.path.join(output_dir, output_filename)
            
            cmd = [
                'ffmpeg', '-i', audio_file,
                '-acodec', 'pcm_s16le',  # 16비트 PCM
                '-ar', '16000',          # 16kHz 샘플링
                '-ac', '1',              # 모노 채널
                '-af', 'loudnorm=I=-16:TP=-1.5:LRA=11',  # 음량 정규화
                '-y', output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                # 캐시에 저장
                shutil.copy2(output_path, cache_path)
                self._add_temp_file(output_path)
                return output_path
            else:
                print(f"⚠️ ffmpeg 정규화 실패: {result.stderr}")
                return None
                
        except Exception as e:
            print(f"⚠️ 오디오 정규화 오류: {audio_file}, {e}")
            return None
    
    def cleanup(self):
        """리소스 정리"""
        self.executor.shutdown(wait=True)
        
        # 모든 임시파일 삭제
        with self.temp_lock:
            for temp_file in self.temp_files:
                try:
                    if os.path.exists(temp_file):
                        os.remove(temp_file)
                except Exception as e:
                    print(f"⚠️ 임시파일 삭제 실패: {temp_file}, {e}")
            self.temp_files.clear()


class Denoiser:
    """
    A class to handle audio denoising using librosa and noisereduce.

    This class provides methods to load noisy audio, apply denoising, and
    save the cleaned output to disk.

    Parameters
    ----------
    config_path : str
        Path to the configuration file that specifies runtime settings.
    output_dir : str, optional
        Directory to save cleaned audio files. Defaults to ".temp".

    Attributes
    ----------
    config : omegaconf.DictConfig
        Loaded configuration data.
    output_dir : str
        Directory to save cleaned audio files.
    logger : Logger
        Logger instance for recording messages.
    """

    def __init__(self, config_path: Annotated[str, "Path to the config file"],
                 output_dir: Annotated[str, "Default directory to save cleaned audio files"] = "/app/temp") -> None:
        """
        Initialize the Denoiser class.

        Parameters
        ----------
        config_path : str
            Path to the configuration file that specifies runtime settings.
        output_dir : str, optional
            Default directory to save cleaned audio files. Defaults to ".temp".
        """
        self.config = OmegaConf.load(config_path)
        self.output_dir = output_dir
        os.makedirs(self.output_dir, exist_ok=True)
        self.logger = Logger(name="DenoiserLogger")

    def denoise_audio(
            self,
            input_path: Annotated[str, "Path to the noisy audio file"],
            output_dir: Annotated[str, "Directory to save the cleaned audio file"],
            noise_threshold: Annotated[float, "Noise threshold value to decide if denoising is needed"],
            print_output: Annotated[bool, "Whether to log the process to console"] = False,
    ) -> str:
        """
        Denoise an audio file using noisereduce and librosa.

        Parameters
        ----------
        input_path : str
            Path to the noisy input audio file.
        output_dir : str
            Directory to save the cleaned audio file.
        noise_threshold : float
            Noise threshold value to decide if denoising is needed.
        print_output : bool, optional
            Whether to log the process to the console. Defaults to False.

        Returns
        -------
        str
            Path to the saved audio file if denoising is performed, otherwise the original audio file path.

        Examples
        --------
        >>> denoise = Denoiser("config.yaml")
        >>> input_file = "noisy_audio.wav"
        >>> output_directory = "cleaned_audio"
        >>> noise_thresh = 0.02
        >>> result = denoiser.denoise_audio(input_file, output_directory, noise_thresh)
        >>> print(result)
        cleaned_audio/denoised.wav
        """
        self.logger.log(f"Loading: {input_path}", print_output=print_output)

        noisy_waveform, sr = librosa.load(input_path, sr=None)

        noise_level = rms(y=noisy_waveform).mean()
        self.logger.log(f"Calculated noise level: {noise_level}", print_output=print_output)

        if noise_level < noise_threshold:
            self.logger.log("Noise level is below the threshold. Skipping denoising.", print_output=print_output)
            return input_path

        self.logger.log("Denoising process started...", print_output=print_output)

        cleaned_waveform = reduce_noise(y=noisy_waveform, sr=sr)

        output_path = os.path.join(output_dir, "denoised.wav")

        os.makedirs(output_dir, exist_ok=True)

        sf.write(output_path, cleaned_waveform, sr)

        self.logger.log(f"Denoising completed! Cleaned file: {output_path}", print_output=print_output)

        return output_path


class SpeechEnhancement:
    """
    A class for speech enhancement using the MPSENet model.

    This class provides methods to load audio, apply enhancement using a
    pre-trained MPSENet model, and save the enhanced output.

    Parameters
    ----------
    config_path : str
        Path to the configuration file specifying runtime settings.
    output_dir : str, optional
        Directory to save enhanced audio files. Defaults to ".temp".

    Attributes
    ----------
    config : omegaconf.DictConfig
        Loaded configuration data.
    output_dir : str
        Directory to save enhanced audio files.
    model_name : str
        Name of the pre-trained model.
    device : str
        Device to run the model (e.g., "cpu" or "cuda").
    model : MPSENet
        Pre-trained MPSENet model instance.
    """

    def __init__(
            self,
            config_path: Annotated[str, "Path to the config file"],
            output_dir: Annotated[str, "Default directory to save enhanced audio files"] = "/app/temp"
    ) -> None:
        """
        Initialize the SpeechEnhancement class.

        Parameters
        ----------
        config_path : str
            Path to the configuration file specifying runtime settings.
        output_dir : str, optional
            Directory to save enhanced audio files. Defaults to ".temp".
        """
        self.config = OmegaConf.load(config_path)
        self.output_dir = output_dir
        os.makedirs(self.output_dir, exist_ok=True)

        self.model_name = self.config.models.mpsenet.model_name
        self.device = self.config.runtime.device

        # MPSENet 모델 초기화 (fallback 모드 지원)
        if MPSENet is None:
            print("Warning: MPSENet is not available. SpeechEnhancement will be disabled.")
            self.model = None
        else:
            try:
                import warnings
                with warnings.catch_warnings():
                    warnings.simplefilter("ignore")
                self.model = MPSENet.from_pretrained(self.model_name).to(self.device)
                print(f"✅ MPSENet model loaded: {self.model_name}")
            except Exception as e:
                print(f"Warning: Failed to load MPSENet model: {e}")
                print("🔄 SpeechEnhancement will run in fallback mode")
                self.model = None

    def enhance_audio(
            self,
            input_path: Annotated[str, "Path to the original audio file"],
            output_path: Annotated[str, "Path to save the enhanced audio file"],
            noise_threshold: Annotated[float, "Noise threshold value to decide if enhancement is needed"],
            verbose: Annotated[bool, "Whether to log additional info to console"] = False,
    ) -> str:
        """
        Enhance an audio file using the MPSENet model.

        Parameters
        ----------
        input_path : str
            Path to the original input audio file.
        output_path : str
            Path to save the enhanced audio file.
        noise_threshold : float
            Noise threshold value to decide if enhancement is needed.
        verbose : bool, optional
            Whether to log additional info to the console. Defaults to False.

        Returns
        -------
        str
            Path to the enhanced audio file if enhancement is performed, otherwise the original file path.

        Examples
        --------
        >>> enhancer = SpeechEnhancement("config.yaml")
        >>> input_file = "raw_audio.wav"
        >>> output_file = "enhanced_audio.wav"
        >>> noise_thresh = 0.03
        >>> result = enhancer.enhance_audio(input_file, output_file, noise_thresh)
        >>> print(result)
        enhanced_audio.wav
        """
        # MPSENet 모델이 비활성화된 경우 원본 파일 반환
        if self.model is None:
            if verbose:
                print("[SpeechEnhancement] MPSENet model is disabled. Returning original file.")
            return input_path

        raw_waveform, sr_raw = librosa.load(input_path, sr=None)
        noise_level = rms(y=raw_waveform).mean()

        if verbose:
            print(f"[SpeechEnhancement] Detected noise level: {noise_level:.6f}")

        if noise_level < noise_threshold:
            if verbose:
                print(f"[SpeechEnhancement] Noise level < {noise_threshold} → enhancement skipped.")
            return input_path

        try:
            sr_model = self.model.h.sampling_rate
            waveform, sr = librosa.load(input_path, sr=sr_model)

            if verbose:
                print(f"[SpeechEnhancement] Enhancement with MPSENet started using model: {self.model_name}")

            enhanced_waveform, sr_out, _ = self.model(waveform)

            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            sf.write(output_path, enhanced_waveform, sr_out)

            if verbose:
                print(f"[SpeechEnhancement] Enhancement complete. Saved to: {output_path}")

            return output_path
        except Exception as e:
            print(f"Warning: Speech enhancement failed: {e}")
            if verbose:
                print("[SpeechEnhancement] Returning original file due to error.")
            return input_path


if __name__ == "__main__":
    test_config_path = "config/config.yaml"
    noisy_audio_file = ".data/example/noisy/LookOncetoHearTargetSpeechHearingwithNoisyExamples.mp3"
    temp_dir = "/app/temp"

    denoiser = Denoiser(config_path=test_config_path, output_dir=temp_dir)
    denoised_path = denoiser.denoise_audio(
        input_path=noisy_audio_file,
        output_dir=temp_dir,
        noise_threshold=0.005,
        print_output=True
    )
    if denoised_path == noisy_audio_file:
        print("Denoising skipped due to low noise level.")
    else:
        print(f"Denoising completed! Cleaned file saved at: {denoised_path}")

    speech_enhancer = SpeechEnhancement(config_path=test_config_path, output_dir=temp_dir)
    enhanced_audio_path = os.path.join(temp_dir, "enhanced_audio.wav")

    result_path = speech_enhancer.enhance_audio(
        input_path=denoised_path,
        output_path=enhanced_audio_path,
        noise_threshold=0.005,
        verbose=True
    )

    if result_path == denoised_path:
        print("Enhancement skipped due to low noise level.")
    else:
        print(f"Speech enhancement completed! Enhanced file saved at: {result_path}")
